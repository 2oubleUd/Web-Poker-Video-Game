@page "/game"
@using PokerVideoGame.Models;
@using System.Timers;
@using PokerVideoGame.ViewModels;
@using Web_Poker_Video_Game.Interfaces;
@using Web_Poker_Video_Game.Services;
@using Web_Poker_Video_Game.Services2;
    using Web_Poker_Video_Game.Services2;

@inject GameService gameService;
@inject CardService cardService;
@inject RankingService rankingService;
@inject GameHistoryService gameHistoryService;
@inject PokerViewModel pokerViewModel;

<p> Selected wage: @pokerViewModel.SelectedWage</p>

<div class="bank-account">
    Bank account: @pokerViewModel.Money
</div>

<p> Your prize: @pokerViewModel.Prize</p>

<h3>PokerCards</h3>

<div class="card-deck">

    @if (pokerViewModel.PreparedDeck != null)
    {
        <div class="row">

            <div class="col-md-2 m-3">
                <div class="d-flex justify-content-center">
                    <img class="imageThumbnail" src="@($"PNG-cards-1.3\\{pokerViewModel.Table[0].ImagePath}")" asp-append-version="true" />
                </div>

                <div class="text-center card-header">
                    @pokerViewModel.Table[0].CardValue.ToString() of @pokerViewModel.Table[0].CardSuit.ToString()
                </div>

                <div class="text-center">
                    <button class="btn @(!pokerViewModel.CardsToChange[0] ? "btn-hold-clicked" : "btn-hold") w-50" @onclick="@(e => HoldCard(0))">HOLD</button>
                </div>
            </div>

            <div class="col-md-2 m-3">
                <div class="d-flex justify-content-center">
                    <img class="imageThumbnail" src="@($"PNG-cards-1.3\\{pokerViewModel.Table[1].ImagePath}")" asp-append-version="true" />
                </div>

                <div class="text-center card-header">
                    @pokerViewModel.Table[1].CardValue.ToString() of @pokerViewModel.Table[1].CardSuit.ToString()
                </div>

                <div class="text-center">
                    <button class="btn @(!pokerViewModel.CardsToChange[1] ? "btn-hold-clicked" : "btn-hold") w-50" @onclick="@(e => HoldCard(1))">HOLD</button>
                </div>
            </div>

            <div class="col-md-2 m-3">


                <div class="d-flex justify-content-center">
                    <img class="imageThumbnail" src="@($"PNG-cards-1.3\\{pokerViewModel.Table[2].ImagePath}")" asp-append-version="true" />
                </div>

                <div class="text-center card-header">
                    @pokerViewModel.Table[2].CardValue.ToString() of @pokerViewModel.Table[2].CardSuit.ToString()
                </div>

                <div class="text-center">
                    <button class="btn @(!pokerViewModel.CardsToChange[2] ? "btn-hold-clicked" : "btn-hold") w-50" @onclick="@(e => HoldCard(2))">HOLD</button>
                </div>
            </div>

            <div class="col-md-2 m-3">


                <div class="d-flex justify-content-center">
                    <img class="imageThumbnail" src="@($"PNG-cards-1.3\\{pokerViewModel.Table[3].ImagePath}")" asp-append-version="true" />
                </div>

                <div class="text-center card-header">
                    @pokerViewModel.Table[3].CardValue.ToString() of @pokerViewModel.Table[3].CardSuit.ToString()
                </div>

                <div class="text-center">
                    <button class="btn @(!pokerViewModel.CardsToChange[3] ? "btn-hold-clicked" : "btn-hold") w-50" @onclick="@(e => HoldCard(3))">HOLD</button>
                </div>

            </div>

            <div class="col-md-2 m-3">

                <div class="d-flex justify-content-center">
                    <img class="imageThumbnail" src="@($"PNG-cards-1.3\\{pokerViewModel.Table[4].ImagePath}")" asp-append-version="true" />
                </div>

                <div class="text-center card-header">
                    @pokerViewModel.Table[4].CardValue.ToString() of @pokerViewModel.Table[4].CardSuit.ToString()
                </div>

                <div class="text-center">
                    <button class="btn @(!pokerViewModel.CardsToChange[4] ? "btn-hold-clicked" : "btn-hold") w-50" @onclick="@(e => HoldCard(4))">HOLD</button>
                </div>

            </div>


            <div class="col-md-1">
                <button class="btn btn-primary" @onclick="DealCards">DEAL</button>
            </div>

            <div class="col-md-3">
                <button class="btn btn-primary" @onclick="ChangeWage">ADD COIN</button>
            </div>

        </div>

    }
    else
    {
        <div class="spinner"></div>
    }

    <div class="poker-hand">
        Poker ranking: @pokerViewModel.PokerHand
    </div>
</div>

@* <div>
    @if (pokerViewModel.ListOfGames != null)
    {
        <h3> </h3>
        <h3>Game History</h3>

        <table class="table">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Prize</th>
                    <th>Cards</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var gameHistory in pokerViewModel.ListOfGames)
                {
                    <tr>
                        

                        <td>@gameHistory.Id</td>
                        <td>@gameHistory.Prize</td>
                        <td>
                            @if (gameHistory.PokerHandsHistory != null)
                            {
                                int counter = 0;
                                @foreach (var card in gameHistory.PokerHandsHistory)
                                {
                                    if (card != null)
                                    {
                                        <img src="@($"PNG-cards-1.3\\{gameHistory.PokerHandsHistory[counter].ImagePath}")" 
                                        alt="@card.CardValue.ToString() of @card.CardSuit.ToString()"
                                        class="card-image-history" />
                                        counter++;
                                    }
                                    else
                                    {
                                        <div class="spinner"></div>
                                    }
                                }
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <div class="spinner"></div>
    }

</div> *@


@* to do: implement displaying poker rankings *@

@code
{
    // to do: read all this player stats like bank account from api

    // to do: we need to add an ability to choose player and work on its account

    [Inject]
    public IPlayerService playerService { get; set; }

    private Timer? delayTimer;

    private bool dealing = false;

    protected async override Task OnInitializedAsync()
    {
        base.OnInitialized();
        PrepareDeck();
        // to do: How to make program wait for choosing the right wage by player and then give him cards?

        pokerViewModel.Player = await playerService.GetPlayerByIdAsync(2);
        pokerViewModel.Money = pokerViewModel.Player.AccountBalance;
        //pokerViewModel.ListOfGames = pokerViewModel.Player.PlayerGameHistory;

        pokerViewModel.SelectedWage = pokerViewModel.Wages[0];

        // rankingService.Ranking(Table, SelectedWage);
        pokerViewModel.PokerHand = gameService.CurrentPokerHand;
    }

    public void ChangeWage()
    {
        pokerViewModel.WageCounter = (pokerViewModel.WageCounter + 1) % pokerViewModel.Wages.Length;
        pokerViewModel.SelectedWage = pokerViewModel.Wages[pokerViewModel.WageCounter];
    }

    public void PrepareDeck()
    {
        pokerViewModel.PreparedDeck = cardService.ShuffleCards(cardService.SetUpDeck());
        pokerViewModel.Table = cardService.PrepareTable(pokerViewModel.PreparedDeck);
    }

    public void HoldCard(int card)
    {
        pokerViewModel.CardsToChange[card] = !pokerViewModel.CardsToChange[card];
        InvokeAsync(StateHasChanged);

    }

    public async Task DealCards()
    {
        for (int i = 0; i < pokerViewModel.CardsToChange.Count; i++)
        {
            if (pokerViewModel.CardsToChange[i])
            {
                pokerViewModel.Table[i] = pokerViewModel.PreparedDeck[pokerViewModel.PreparedDeck.Count - 1];
                pokerViewModel.PreparedDeck.RemoveAt(pokerViewModel.PreparedDeck.Count - 1);
            }
        }

        await InvokeAsync(StateHasChanged);

        if (dealing)
        {
            return; // If already dealing, ignore subsequent clicks
        }

        pokerViewModel.PokerHand = gameService.CurrentPokerHand;

        pokerViewModel.Money = rankingService.Ranking(pokerViewModel.Table, pokerViewModel.SelectedWage);

        pokerViewModel.Prize = rankingService.Ranking(pokerViewModel.Table, pokerViewModel.SelectedWage) - pokerViewModel.Money;

        //gameHistoryService.AddGameHistory(pokerViewModel.Table, pokerViewModel.Prize);

        //pokerViewModel.ListOfGames = gameHistoryService.GetAllGamesHistory();

        // update of current player
        pokerViewModel.Player.AccountBalance = pokerViewModel.Money;
        //pokerViewModel.Player.PlayerGameHistory = gameHistoryService.gameHistoryList;

        await playerService.UpdatePlayerAsync(pokerViewModel.Player);

        dealing = true;

        delayTimer = new Timer(3000);
        delayTimer.Elapsed += (sender, e) =>
        {
            delayTimer.Stop();
            ResetGame();
            InvokeAsync(StateHasChanged);
            dealing = false;
        };
        delayTimer.AutoReset = false;
        delayTimer.Start();
    }

    private void ResetGame()
    {
        // if (gameHistoryService.gameHistoryList.Count == 10)
        //     gameHistoryService.gameHistoryList.Clear();

        pokerViewModel.CardsToChange = new List<bool> { true, true, true, true, true };

        pokerViewModel.PokerHand = "";
        PrepareDeck();
    }
}