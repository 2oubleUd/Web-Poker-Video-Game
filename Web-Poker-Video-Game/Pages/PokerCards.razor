@page "/"
@using PokerVideoGame.Models;
@using System.Timers;
@using Web_Poker_Video_Game.Interfaces;
@using Web_Poker_Video_Game.Services;

@inject GameService gameService;
@inject CardService cardService;
@inject RankingService rankingService;
@inject GameHistoryService gameHistoryService;
@inject IPlayerService playerService;

<p> Selected wage: @SelectedWage</p>

<div class="bank-account">
    Bank account: @Money
</div>

<p> Your prize: @Prize</p>

<h3>PokerCards</h3>

<div class="card-deck">

    @if (PreparedDeck != null)
    {
        <div class="row">

            <div class="col-md-2 m-3">
                <div class="d-flex justify-content-center">
                    <img class="imageThumbnail" src="@($"PNG-cards-1.3\\{Table[0].ImagePath}")" asp-append-version="true" />
                </div>

                <div class="text-center card-header">
                    @Table[0].CardValue.ToString() of @Table[0].CardSuit.ToString()
                </div>

                <div class="text-center">
                    <button class="btn @(!CardsToChange[0] ? "btn-hold-clicked" : "btn-hold") w-50" @onclick="@(e => HoldCard(0))">HOLD</button>
                </div>
            </div>

            <div class="col-md-2 m-3">
                <div class="d-flex justify-content-center">
                    <img class="imageThumbnail" src="@($"PNG-cards-1.3\\{Table[1].ImagePath}")" asp-append-version="true" />
                </div>

                <div class="text-center card-header">
                    @Table[1].CardValue.ToString() of @Table[1].CardSuit.ToString()
                </div>

                <div class="text-center">
                    <button class="btn @(!CardsToChange[1] ? "btn-hold-clicked" : "btn-hold") w-50" @onclick="@(e => HoldCard(1))">HOLD</button>
                </div>
            </div>

            <div class="col-md-2 m-3">


                <div class="d-flex justify-content-center">
                    <img class="imageThumbnail" src="@($"PNG-cards-1.3\\{Table[2].ImagePath}")" asp-append-version="true" />
                </div>

                <div class="text-center card-header">
                    @Table[2].CardValue.ToString() of @Table[2].CardSuit.ToString()
                </div>

                <div class="text-center">
                    <button class="btn @(!CardsToChange[2] ? "btn-hold-clicked" : "btn-hold") w-50" @onclick="@(e => HoldCard(2))">HOLD</button>
                </div>
            </div>

            <div class="col-md-2 m-3">


                <div class="d-flex justify-content-center">
                    <img class="imageThumbnail" src="@($"PNG-cards-1.3\\{Table[3].ImagePath}")" asp-append-version="true" />
                </div>

                <div class="text-center card-header">
                    @Table[3].CardValue.ToString() of @Table[3].CardSuit.ToString()
                </div>

                <div class="text-center">
                    <button class="btn @(!CardsToChange[3] ? "btn-hold-clicked" : "btn-hold") w-50" @onclick="@(e => HoldCard(3))">HOLD</button>
                </div>

            </div>

            <div class="col-md-2 m-3">

                <div class="d-flex justify-content-center">
                    <img class="imageThumbnail" src="@($"PNG-cards-1.3\\{Table[4].ImagePath}")" asp-append-version="true" />
                </div>

                <div class="text-center card-header">
                    @Table[4].CardValue.ToString() of @Table[4].CardSuit.ToString()
                </div>

                <div class="text-center">
                    <button class="btn @(!CardsToChange[4] ? "btn-hold-clicked" : "btn-hold") w-50" @onclick="@(e => HoldCard(4))">HOLD</button>
                </div>

            </div>


            <div class="col-md-1">
                <button class="btn btn-primary" @onclick="DealCards">DEAL</button>
            </div>

            <div class="col-md-3">
                <button class="btn btn-primary" @onclick="ChangeWage">ADD COIN</button>
            </div>

        </div>

    }
    else
    {
        <div class="spinner"></div>
    }

    <div class="poker-hand">
        Poker ranking: @PokerHand
    </div>
</div>

<div>
    @if (ListOfGames != null)
    {
        <h3> </h3>
        <h3>Game History</h3>

        <table class="table">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Prize</th>
                    <th>Cards</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var gameHistory in ListOfGames)
                {
                    <tr>
                        

                        <td>@gameHistory.Id</td>
                        <td>@gameHistory.Prize</td>
                        <td>Here will be images of cards
                            @* @if (gameHistory.PokerHandsHistory != null)
                            {
                                int counter = 0;
                                @foreach (var card in gameHistory.PokerHandsHistory)
                                {
                                    if (card != null)
                                    {
                                        <img src="@($"PNG-cards-1.3\\{gameHistory.PokerHandsHistory[counter].ImagePath}")" 
                                        alt="@card.CardValue.ToString() of @card.CardSuit.ToString()"
                                        class="card-image-history" />
                                        counter++;
                                    }
                                    else
                                    {
                                        <div class="spinner"></div>
                                    }
                                }
                            } *@
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <div class="spinner"></div>
    }

</div>

@* to do: implement displaying poker rankings *@

@code
{
    // to do: read all this player stats like bank account from api

    // to do: we need to add an ability to choose player and work on its account

    public int Money { get; set; }

    public Player Player { get; set; }

    public List<GameHistory>? ListOfGames { get; set; }

    public int[] Wages = new int[6] { 10, 20, 50, 100, 200, 500 };
    public int SelectedWage;
    public int WageCounter = 0;
    public int Prize = 0;

    public List<Card> PreparedDeck = new List<Card>();
    public List<bool> CardsToChange = new List<bool> { true, true, true, true, true };
    Card[] Table = new Card[5];

    private Timer? delayTimer;

    private bool dealing = false;

    private string PokerHand = "";

    protected async override Task OnInitializedAsync()
    {
        base.OnInitialized();
        PrepareDeck();
        // to do: How to make program wait for choosing the right wage by player and then give him cards?

        Player = await playerService.GetPlayerByIdAsync(2);
        Money = Player.AccountBalance;
        ListOfGames = Player.PlayerGameHistory;

        SelectedWage = Wages[0];

        // rankingService.Ranking(Table, SelectedWage);
        PokerHand = gameService.CurrentPokerHand;
    }

    public void ChangeWage()
    {
        WageCounter = (WageCounter + 1) % Wages.Length;
        SelectedWage = Wages[WageCounter];
    }

    public void PrepareDeck()
    {
        PreparedDeck = cardService.ShuffleCards(cardService.SetUpDeck());
        Table = cardService.PrepareTable(PreparedDeck);
    }

    public void HoldCard(int card)
    {
        CardsToChange[card] = !CardsToChange[card];
        InvokeAsync(StateHasChanged);

    }

    public async Task DealCards()
    {
        for (int i = 0; i < CardsToChange.Count; i++)
        {
            if (CardsToChange[i])
            {
                Table[i] = PreparedDeck[PreparedDeck.Count - 1];
                PreparedDeck.RemoveAt(PreparedDeck.Count - 1);
            }
        }

        await InvokeAsync(StateHasChanged);

        if (dealing)
        {
            return; // If already dealing, ignore subsequent clicks
        }

        PokerHand = gameService.CurrentPokerHand;

        Prize = rankingService.Ranking(Table, SelectedWage) - Money;
        Money += rankingService.Ranking(Table, SelectedWage);

        gameHistoryService.AddGameHistory(Table, Prize);

        ListOfGames = gameHistoryService.gameHistoryList;

        // update of current player
        this.Player.AccountBalance = Money;
        this.Player.PlayerGameHistory = gameHistoryService.gameHistoryList;

        await playerService.UpdatePlayerAsync(Player);

        dealing = true;

        delayTimer = new Timer(3000);
        delayTimer.Elapsed += (sender, e) =>
        {
            delayTimer.Stop();
            ResetGame();
            InvokeAsync(StateHasChanged);
            dealing = false;
        };
        delayTimer.AutoReset = false;
        delayTimer.Start();
    }

    private void ResetGame()
    {
        if (gameHistoryService.gameHistoryList.Count == 10)
            gameHistoryService.gameHistoryList.Clear();

        CardsToChange = new List<bool> { true, true, true, true, true };

        PokerHand = "";
        PrepareDeck();
    }
}