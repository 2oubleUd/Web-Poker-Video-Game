@using System.Text.Json;
@using System.Text;
@using Microsoft.AspNetCore.Components.Authorization
@using WebPokerVideoGame.App.Shared.Providers;
@inherits LayoutComponentBase
@inject HttpClient _httpClient;
@inject IHttpClientFactory _httpClientFactory
@inject AuthenticationStateProvider _authStateProvider
@inject ILocalStorageService _localStorageService
@inject NavigationManager _navigationManager
 
<MudThemeProvider/>
<MudDialogProvider/>
<MudDialog />
<MudText Class="ma-4"></MudText>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar Elevation="1" Style="background-image: linear-gradient( 109.6deg,  rgba(0,182,255,1) 11.2%, rgba(102,51,153,1) 91.1% );">
        <AuthorizeView>
            <Authorized>
                <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
            </Authorized>
        </AuthorizeView>
        Web Poker Video Game
        <MudLink Class="ml-6" Color="Color.Inherit" Href="/">Home</MudLink>
        <MudSpacer/>
        <AuthorizeView>
            <Authorized>
                <span>@UserDisplayName(context.User.Claims.ToList())</span>
                <MudLink Class="ml-4" Color="Color.Inherit" OnClick="(() => LogoutAsync(context.User.Claims.ToList()))">Logout</MudLink>
            </Authorized>
            <NotAuthorized>
                <MudLink Color="Color.Inherit" Href="/login" Class="mr-2">Login</MudLink>
                <MudLink Color="Color.Inherit" Href="/registration">Register</MudLink>
            </NotAuthorized>
        </AuthorizeView>
    </MudAppBar>
    
    <AuthorizeView>
        <Authorized>
             <MudDrawer @bind-Open="@_drawerOpen">
                <MyNavMenu/>
            </MudDrawer>
        </Authorized>
    </AuthorizeView>

    <MudMainContent>
        @Body
    </MudMainContent>

</MudLayout>

<BlazoredToasts Position="Blazored.Toast.Configuration.ToastPosition.BottomRight"
    Timeout="4"
    IconType="Blazored.Toast.Configuration.IconType.FontAwesome"
    SuccessClass="success-toast-override"
    SuccessIcon="fa fa-thumbs-up"
    ErrorIcon="fa fa-bug"
    WarningIcon="fa fa-warning"
    InfoIcon="fa fa-info-circle">
</BlazoredToasts>

@code{

    bool _drawerOpen = true;
    private MudTheme _theme = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            StateHasChanged();
        }
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private string UserDisplayName(List<Claim> claims)
    {
        var firstName = claims.Where(x => x.Type == "FirstName").Select(x => x.Value).FirstOrDefault();
        var lastName = claims.Where(x => x.Type == "LastName").Select(x => x.Value).FirstOrDefault();
        if(!string.IsNullOrEmpty(firstName) || !string.IsNullOrEmpty(lastName))
        {
            return $"{firstName} {lastName}";
        }
        var email = claims.Where(x => x.Type == "Email").Select(x => x.Value).FirstOrDefault();
        return email;
    }

    private async Task LogoutAsync(List<Claim> claims)
    {
        var logout = new LogoutVm();
        logout.UserId = Convert.ToInt32(claims.Where(_ => _.Type == "Sub").Select(_ => _.Value).FirstOrDefault() ?? "0");
        logout.RefreshToken = await _localStorageService.GetItemAsync<string>("refresh-token");

        var jsonPayload = JsonSerializer.Serialize(logout);
        var requestContent = new StringContent(jsonPayload, Encoding.UTF8, "application/json");

        var httpClient = _httpClientFactory.CreateClient("Dot7Api");
        var response = await _httpClient.PostAsync("api/user/logout", requestContent);

        await _localStorageService.RemoveItemAsync("refresh-token");
        await _localStorageService.RemoveItemAsync("jwt-access-token");

        (_authStateProvider as CustomAuthProvider).NotifyAuthState();
        _navigationManager.NavigateTo("/login");
    }
}