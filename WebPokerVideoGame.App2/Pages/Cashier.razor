@page "/billing"
@using Microsoft.AspNetCore.Authorization;
@using System.Text.Json;
@using PokerVideoGame.Models.Data.Dtos;
@using System.Text;
@inject HttpClient _httpClient;

@attribute [Authorize]


<head>
    <style>
        body{
            text-align: center;
            height: 100%;
        }

        .payment-logos {
            display: -webkit-flex;
            height: 100%;
            -webkit-align-items: flex-end;
            -webkit-justify-content: center;
        }
        .payments {
            position: absolute;
            bottom: 1rem%;
       }

        payment-logos:target {
            position: absolute;
            top: 0;
            display: block;
            align-items: center;
       }

        .more-credits{
            display: inline-block;
            margin: 30px;
        }

        .form-outline{
            margin: 10px;
        }


    </style>
</head>

<body>
    <h1>Cashier</h1>

    <br/>

    <h3>Here you can add more credits to your account</h3>

    <AuthorizeView>
        <div class="more-credits">
@*             <MudNumericField Value="@user.AccountBalance" ValueChanged="(int newValue)=>AddMoneyAsync(context.User.Claims.ToList(),newValue)" Immediate="true" Label="Add" For="@(()=> user.AccountBalance)"></MudNumericField>
 *@
            <MudNumericField @bind-Value="newValue" Label="Standard" Variant="Variant.Text" Min="0" Max="1000" />

            <MudButton Color="Color.Secondary" OnClick="()=>AddMoneyAsync(context.User.Claims.ToList(), newValue)">Add Credits</MudButton>

        </div>
    </AuthorizeView>

    <div class="payment-logos">
        <img src="/images/billing.jpg" width="40%" height="20%" /> 
    </div>

    <!-- to do: Add toast after adding money successfuly-->

</body>

@code {
    public UpdateUserMoneyDto user { get; set; }
    public int newValue { get; set; }

    public async Task AddMoneyAsync(List<Claim> claims, int newValue)
    {
        user = new UpdateUserMoneyDto();
        user.AmountOfMoney = newValue;
        user.UserId = Convert.ToInt32(claims.Where(x => x.Type == "Sub").Select(x => x.Value).FirstOrDefault() ?? "0");

        var updatedUser = JsonSerializer.Serialize(user);
        var requestUpdatedUser = new StringContent(updatedUser, Encoding.UTF8,"application/json");

        // to do: implement: API method for updating player details (eg. AccountBalance)
        var response = await _httpClient.PutAsync("api/user/account", requestUpdatedUser);
    }
}