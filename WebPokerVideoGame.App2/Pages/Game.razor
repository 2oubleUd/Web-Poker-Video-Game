<!-- Your existing component -->
@page "/game"
@using PokerVideoGame.Models;
@using System.Timers;

@inject GameService gameService;
@inject ICardService cardService;
@inject RankingService rankingService;

@inject NavigationManager NavigationManager

<p> Selected wage: </p>

<div class="bank-account">
    Bank account:
</div>

<p> Your prize: </p>

<h3>PokerCards</h3>

<div class="card-deck">

    @if (deckOfCards != null)
    {
        <div class="row">
            <div class="col-md-2 m-3">
                
                <div class="d-flex justify-content-center">
                    <CardImage Base64Image="@Convert.ToBase64String(deckOfCards[0].ImageData)" />
                </div>

                <div class="text-center card-header">
                    @deckOfCards[0].CardValue.ToString() of @deckOfCards[0].CardSuit.ToString()
                </div>

                <div class="text-center">
                    <button @* class="btn @(!pokerViewModel.CardsToChange[0] ? "btn-hold-clicked" : "btn-hold") w-50" @onclick="@(e => HoldCard(0))" *@>HOLD</button>
                </div>

            </div>

        </div>
    }
    else
    {
        <div class="spinner"></div>
    }

</div>

@code
{
    public List<Card> deckOfCards { get; set; }

    public Card[] table = new Card[5];

    protected async override Task OnInitializedAsync()
    {
        base.OnInitialized();

        deckOfCards = (await cardService.GetDeckOfCardsAsync()).ToList();

        for (int i = 0; i < table.Length; i++)
        {
            table[i] = deckOfCards[deckOfCards.Count - 1];
            deckOfCards.Remove(deckOfCards[deckOfCards.Count - 1]);
        }
    }
}
