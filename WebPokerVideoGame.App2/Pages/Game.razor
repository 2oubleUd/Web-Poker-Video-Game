@page "/game"
@using PokerVideoGame.Models;
@using System.Timers;
@using MudBlazor;
@using System.Security.Claims;
@using PokerVideoGame.Models.Data.Entites;

@inject IToastService toastService;


@inject GameService gameService;
@inject ICardService cardService;
@inject RankingService rankingService;
@inject IUserService userService;
@inject AuthenticationStateProvider authenticationStateProvider;
@inject IRankingService rankingService;

<head>
    <style>
        p{
            padding: 0.4rem;
        }

        h3, h6{
            padding: 0.4rem;
        }
    </style>
</head>


<h3>PokerCards</h3>


<h6> Selected wage: @wages[wageCounter]</h6>

<div class="bank-account" style="padding: 1rem">
    Bank account: @accountBalance
</div>

<h6> Your prize: </h6>

<div class="card-deck">
    @if (IsTableNull())
    {
        <div class="row justify-content-center">
            <div class="col-md-2 m-3" style="display: inline-block">
                <div class="d-flex justify-content-center">
                    <img class="imageThumbnail" src="@($"data:image/png;base64,{@Convert.ToBase64String(table[0].ImageData)}")" alt="PNG Image" />
                </div>

                @if (table[0].CardValue.ToString() == "0" && table[0].CardSuit.ToString() == "Clubs")
                {
                    <div class="text-center card-header mb-4 mt-4">
                        @("N/A")
                    </div>
                }
                else
                {
                    <div class="text-center card-header mb-4 mt-4">
                        @table[0].CardValue.ToString() of @table[0].CardSuit.ToString()
                    </div>
                }

                <div class="text-center">
                    <button class="btn @(!cardsToChange[0] ? "btn-hold-clicked" : "btn-hold") w-50" disabled=@startGame @onclick="@(e => HoldCard(0))">HOLD</button>
                </div>
            </div>

            <div class="col-md-2 m-3" style="display: inline-block">
                <div class="d-flex justify-content-center">
                    <img class="imageThumbnail" src="@($"data:image/png;base64,{@Convert.ToBase64String(table[1].ImageData)}")" alt="PNG Image" />
                </div>

                <div class="text-center card-header mb-4 mt-4">
                    @table[1].CardValue.ToString() of @table[1].CardSuit.ToString()
                </div>

                <div class="text-center">
                    <button class="btn @(!cardsToChange[1] ? "btn-hold-clicked" : "btn-hold") w-50" disabled=@startGame @onclick="@(e => HoldCard(1))">HOLD</button>
                </div>
            </div>

            <div class="col-md-2 m-3" style="display: inline-block">
                <div class="d-flex justify-content-center">
                    <img class="imageThumbnail" src="@($"data:image/png;base64,{@Convert.ToBase64String(table[2].ImageData)}")" alt="PNG Image" />
                </div>

                <div class="text-center card-header mb-4 mt-4">
                    @table[2].CardValue.ToString() of @table[2].CardSuit.ToString()
                </div>

                <div class="text-center">
                    <button class="btn @(!cardsToChange[2] ? "btn-hold-clicked" : "btn-hold") w-50" disabled=@startGame @onclick="@(e => HoldCard(2))">HOLD</button>
                </div>
            </div>

            <div class="col-md-2 m-3" style="display: inline-block">
                <div class="d-flex justify-content-center">
                    <img class="imageThumbnail" src="@($"data:image/png;base64,{@Convert.ToBase64String(table[3].ImageData)}")" alt="PNG Image" />
                </div>

                <div class="text-center card-header mb-4 mt-4">
                    @table[3].CardValue.ToString() of @table[3].CardSuit.ToString()
                </div>

                <div class="text-center">
                    <button class="btn @(!cardsToChange[3] ? "btn-hold-clicked" : "btn-hold") w-50" disabled=@startGame @onclick="@(e => HoldCard(3))">HOLD</button>
                </div>
            </div>

            <div class="col-md-2 m-3" style="display: inline-block">
                <div class="d-flex justify-content-center">
                    <img class="imageThumbnail" src="@($"data:image/png;base64,{@Convert.ToBase64String(table[4].ImageData)}")" alt="PNG Image" />

                </div>

                <div class="text-center card-header mb-4 mt-4">
                    @table[4].CardValue.ToString() of @table[4].CardSuit.ToString()
                </div>

                <div class="text-center">
                    <button class="btn @(!cardsToChange[4] ? "btn-hold-clicked" : "btn-hold") w-50" disabled=@startGame @onclick="@(e => HoldCard(4))">HOLD</button>
                </div>
            </div>

            <div class="col-md-1 mt-4 mr-6">
                <button class="btn btn-primary" disabled=@dealing @onclick="DealCardsAsync">DEAL</button>
            </div>

            <div class="col-md-3 mt-4 ml-6">
                <button class="btn btn-primary" disabled=@dealing @onclick="ChangeWageAsync">ADD COIN</button>
            </div>
        </div>
    }

    else
    {
        <div class="spinner"></div>
    }

</div>


@code
{
    public List<Card> deckOfCards { get; set; }

    public Card[] table = new Card[5];

    public bool[] cardsToChange = new bool[5] { true, true, true, true, true };

    private Timer? delayTimer;

    private bool dealing = false;

    public int[] wages = new int[7] { 10, 20, 50, 100, 200, 500, 1000 };

    public int wageCounter = 0;

    // to do: fix startGame bcs when user doesn't have enough money for bet, hold btns for cards are changing when btn deal is clicked
    public bool startGame = true;

    public User user { get; set; }

    public int accountBalance = 0;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected async override Task OnInitializedAsync()
    {
        var authenticationState = await authenticationStateTask;
        await DisplayUserInfo();
        await StartupTable();

        base.OnInitialized();
    }

    public async Task StartupTable()
    {
        deckOfCards = (await cardService.GetDeckOfCardsAsync()).ToList();
        for (int i = 0; i < table.Length; i++)
        {
            table[i] = deckOfCards.Last();
        }
        deckOfCards.RemoveAt(deckOfCards.Count - 1);

    }

    public async Task DisplayUserInfo()
    {
        var authenticationState = await authenticationStateTask;
        List<Claim> claims = (authenticationState.User.Claims.ToList());

        // Access the user claims from the context
        var userClaims = (await authenticationStateTask).User.Claims.ToList();

        // get result of logged player based on context.User.Id
        var userId = Convert.ToInt32(claims.Where(_ => _.Type == "Sub").Select(_ => _.Value).FirstOrDefault() ?? "0");

        user = await userService.GetUserAsync(userId);

        if (user != null)
        {
            accountBalance = user.AccountBalance;
            await InvokeAsync(() => StateHasChanged());
        }
    }

    private async Task ShowToastAsync()
    {
        toastService.ShowWarning("You don't have enouh money for selected bet");
    }

    private async Task PrepareTable()
    {
        deckOfCards = await cardService.ShuffleCards(deckOfCards);
        table = await cardService.PrepareTable(deckOfCards);
        await InvokeAsync(() => StateHasChanged());
    }

    private void HoldCard(int cardNumber)
    {
        cardsToChange[cardNumber] = !cardsToChange[cardNumber];
    }

    private async Task DealCardsAsync()
    {
        if (accountBalance < wages[wageCounter])
        {
            await ShowToastAsync();
        }

        if (!startGame && accountBalance >= wages[wageCounter])
        {

            if (dealing)
            {

                return; // If already dealing, ignore subsequent clicks
            }

            dealing = true;
            int i = 0;

            foreach (var card in cardsToChange)
            {
                if (card)
                {
                    table[i] = deckOfCards[deckOfCards.Count - 1];
                    deckOfCards.RemoveAt(deckOfCards.Count - 1);
                }
                i++;
            }

            // to do: they probably work (check straight hand bcs it's tricky)
            var prize = rankingService.Ranking(table, wages[wageCounter]);
            if (prize != 0) await userService.UpdateUsersAccountBalance((await authenticationStateTask).User.Claims.ToList(), prize);
            await DisplayUserInfo();

            // Wait for 3 seconds and run ResetGame()
            delayTimer = new Timer(3000);
            delayTimer.Elapsed += async (sender, e) => await ResetGame();
            delayTimer.AutoReset = false;
            delayTimer.Start();
            
        }

        // to do: prepare function to check does user has enough money to pay for bet
        if (startGame && accountBalance >= wages[wageCounter])
        {
            await PrepareTable();
            startGame = !startGame;
        }

    }


    private bool IsTableNull()
    {
        bool[] emptinessOfTable = new bool[5] { false, false, false, false, false };
        int cardNum = 0;

        foreach (Card card in table)
        {
            for (int i = 0; i < 1000; i++)
            {
                if (card != null)
                {
                    emptinessOfTable[cardNum] = true;
                }
            }
            cardNum++;
        }

        foreach (bool isEmpty in emptinessOfTable)
        {
            if (!isEmpty)
            {
                return false;
            }
        }

        return true;
    }

    private async Task ResetGame()
    {
        try
        {
            delayTimer?.Dispose();
            startGame = true;
            dealing = false;
            cardsToChange = new bool[5] { true, true, true, true, true };
            deckOfCards.Clear();

            await StartupTable();
            await DisplayUserInfo();

            await InvokeAsync(() => StateHasChanged());

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in ResetGame: {ex.Message}");
            throw;
        }
    }

    private async void ChangeWageAsync()
    {
        if (wageCounter < 7)
        {
            wageCounter++;
        }
        if (wageCounter == 7)
        {
            wageCounter = 0;
        }
    }



}
