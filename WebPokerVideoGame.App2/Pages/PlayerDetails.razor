@page "/playerdetails"
@using PokerVideoGame.Models;
@using PokerVideoGame.Models.Data.Entites;
@using WebPokerVideoGame.App2.Services;
@using WebPokerVideoGame.App2.Interfaces;
@using System.Security.Claims;

@inject AuthenticationStateProvider authenticationStateProvider

<head>
    <style>
        body {
            text-align: center;
            align-content: center;
            align-items: center;
            height: 100%;
        }

    </style>
</head>

<body>
    <h2> Player info</h2>
    <br />

    <div class="ma-1 d-flex justify-center">
        <div class="card-deck">
            @if (userInfo.Count >= 5)
            {
                <div class="card m-3" style="min-width: 35rem; max-width:40.5%;">
                    <div class="card-header">
                        <h3>@userInfo[1]</h3>
                    </div>


                    <div class="d-flex justify-content-center">
                        <img style="width:12rem; height:12rem; padding: 0.5rem" src="/images/blank-profile-avatar.jpg" />
                    </div>

                    <div class="card-body">
                        <h6>First name: @userInfo[1]</h6>
                        <h6>Last name: @userInfo[2]</h6>
                        <h6>Account balance: @userInfo[3]$</h6>
                        <h6>E-mail address: @userInfo[4]</h6>
                    </div>

                    <div class="card-footer text-center">
                        <a href="#" class="btn btn-primary m-1">View</a>

                        <a href="#" class="btn btn-primary m-1">Edit</a>

                        <a href="#" class="btn btn-danger m-1">Delete</a>
                    </div>
                </div>
            }
            else
            {
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />

            }

        </div>

    </div>


</body>





@code {
    private bool _hidePosition;
    private bool _loading;

    public User user { get; set; }

    public List<string> userInfo = new List<string>();

    [Inject]
    public IUserService userService { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // to do: function to get result of logged player
        var authenticationState = await authenticationStateTask;
        await DisplayUserInfo(authenticationState.User.Claims.ToList());
    }

    public async Task<List<string>> DisplayUserInfo(List<Claim> claims)
    {
        // Access the user claims from the context
        var userClaims = (await authenticationStateTask).User.Claims.ToList();

        // get result of logged player based on context.User.Id
        var userId = Convert.ToInt32(claims.Where(_ => _.Type == "Sub").Select(_ => _.Value).FirstOrDefault() ?? "0");

        user = await userService.GetUserAsync(userId);

        if (user != null)
        {
            userInfo.Add((user.Id).ToString());
            userInfo.Add(user.FirstName);
            userInfo.Add(user.LastName);
            userInfo.Add((user.AccountBalance).ToString());
            userInfo.Add(user.Email);

            return userInfo;
        }

        return null;
    }

}
